//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PublishR.Mvc.SampleNode2.ProductServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProductServiceReference.IProductService")]
    public interface IProductService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublishrService/Subscribe", ReplyAction="http://tempuri.org/IPublishrService/SubscribeResponse")]
        void Subscribe(PublishR.PubSub.Subscription subscription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublishrService/Subscribe", ReplyAction="http://tempuri.org/IPublishrService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync(PublishR.PubSub.Subscription subscription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublishrService/UnSubscribe", ReplyAction="http://tempuri.org/IPublishrService/UnSubscribeResponse")]
        bool UnSubscribe(PublishR.PubSub.Subscription subscription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPublishrService/UnSubscribe", ReplyAction="http://tempuri.org/IPublishrService/UnSubscribeResponse")]
        System.Threading.Tasks.Task<bool> UnSubscribeAsync(PublishR.PubSub.Subscription subscription);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetData", ReplyAction="http://tempuri.org/IProductService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/GetData", ReplyAction="http://tempuri.org/IProductService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SetData", ReplyAction="http://tempuri.org/IProductService/SetDataResponse")]
        void SetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProductService/SetData", ReplyAction="http://tempuri.org/IProductService/SetDataResponse")]
        System.Threading.Tasks.Task SetDataAsync(int value);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProductServiceChannel : PublishR.Mvc.SampleNode2.ProductServiceReference.IProductService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProductServiceClient : System.ServiceModel.ClientBase<PublishR.Mvc.SampleNode2.ProductServiceReference.IProductService>, PublishR.Mvc.SampleNode2.ProductServiceReference.IProductService {
        
        public ProductServiceClient() {
        }
        
        public ProductServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProductServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Subscribe(PublishR.PubSub.Subscription subscription) {
            base.Channel.Subscribe(subscription);
        }
        
        public System.Threading.Tasks.Task SubscribeAsync(PublishR.PubSub.Subscription subscription) {
            return base.Channel.SubscribeAsync(subscription);
        }
        
        public bool UnSubscribe(PublishR.PubSub.Subscription subscription) {
            return base.Channel.UnSubscribe(subscription);
        }
        
        public System.Threading.Tasks.Task<bool> UnSubscribeAsync(PublishR.PubSub.Subscription subscription) {
            return base.Channel.UnSubscribeAsync(subscription);
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public void SetData(int value) {
            base.Channel.SetData(value);
        }
        
        public System.Threading.Tasks.Task SetDataAsync(int value) {
            return base.Channel.SetDataAsync(value);
        }
    }
}
